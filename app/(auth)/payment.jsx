import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';
import React, { useState } from 'react';
import {
    Alert,
    ScrollView,
    StyleSheet,
    Text,
    TouchableOpacity,
    View,
} from 'react-native';
import api from './api';

const Payment = () => {
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleContinue = async () => {
    if (!selectedPlan) {
      Alert.alert('Th√¥ng b√°o', 'Vui l√≤ng ch·ªçn m·ªôt g√≥i ƒëƒÉng k√Ω.');
      return;
    }

    setLoading(true);
    try {
      // Here you would integrate with your payment gateway
      // For now, we'll simulate a successful payment
      
      // Update user subscription status
      const userType = await AsyncStorage.getItem('user_type');
      const userId = await AsyncStorage.getItem('user_id');
      
      if (userType === 'Psychologist') {
        // Update psychologist subscription
        await api.patch(`/api/psychologists/manage/${userId}/`, {
          subscription_plan: selectedPlan,
          subscription_status: 'active'
        });
      }

      Alert.alert(
        'Thanh to√°n th√†nh c√¥ng!',
        `B·∫°n ƒë√£ ƒëƒÉng k√Ω g√≥i ${selectedPlan} VND/th√°ng. B√¢y gi·ªù h√£y t·∫°o h·ªì s∆° c·ªßa b·∫°n.`,
        [
          {
            text: 'Ti·∫øp t·ª•c',
            onPress: () => {
              // Redirect to profile creation
              router.replace('/(Pychologist)/EditProfile');
            }
          }
        ]
      );
    } catch (error) {
      console.error('Payment error:', error);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>ƒêƒÉng k√Ω ƒë·ªÉ tr·ªü th√†nh chuy√™n gia tr√™n n·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i</Text>

      <View style={styles.planContainer}>
        <TouchableOpacity
          style={[
            styles.planOption,
            selectedPlan === '800.000' && styles.selectedPlan,
          ]}
          onPress={() => setSelectedPlan('800.000')}
        >
          <Text style={styles.price}>800.000 VND / th√°ng</Text>
          <Text style={styles.desc}>
            ‚≠ê G√≥i C∆° B·∫£n:
            {'\n'}‚Ä¢ Hi·ªÉn th·ªã h·ªì s∆° c∆° b·∫£n
            {'\n'}‚Ä¢ 10 l∆∞·ª£t k·∫øt n·ªëi kh√°ch h√†ng m·ªói th√°ng
            {'\n'}‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t qua email
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.planOption,
            selectedPlan === '1.500.000' && styles.selectedPlan,
          ]}
          onPress={() => setSelectedPlan('1.500.000')}
        >
          <Text style={styles.price}>1.500.000 VND / th√°ng</Text>
          <Text style={styles.desc}>
            üíº G√≥i Chuy√™n Nghi·ªáp:
            {'\n'}‚Ä¢ ∆Øu ti√™n hi·ªÉn th·ªã h·ªì s∆°
            {'\n'}‚Ä¢ K·∫øt n·ªëi kh√¥ng gi·ªõi h·∫°n v·ªõi kh√°ch h√†ng
            {'\n'}‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7
            {'\n'}‚Ä¢ B√°o c√°o hi·ªáu su·∫•t c√° nh√¢n h√†ng th√°ng
          </Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity 
        style={[styles.button, loading && styles.buttonDisabled]} 
        onPress={handleContinue}
        disabled={loading}
      >
        <Text style={styles.buttonText}>
          {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Ti·∫øp t·ª•c'}
        </Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

export default Payment;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
    paddingTop: 70,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  planContainer: {
    marginBottom: 30,
  },
  planOption: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    padding: 16,
    marginBottom: 15,
    backgroundColor: '#f9f9f9',
  },
  selectedPlan: {
    borderColor: '#4f46e5',
    backgroundColor: '#eef2ff',
  },
  price: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#222',
    marginBottom: 8,
  },
  desc: {
    fontSize: 14,
    color: '#555',
    lineHeight: 22,
  },
  button: {
    backgroundColor: '#4f46e5',
    paddingVertical: 14,
    borderRadius: 10,
    alignItems: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#ccc',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
  },
});
